package gotemplates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tenant_aws_initial_setup_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4f\x4f\xe3\x3e\x10\xbd\xf7\x53\x58\x3e\xfd\x7e\x88\xff\x12\x5a\xad\x6f\x15\x85\x15\x2b\x40\x55\x0b\xbb\x07\xd4\x83\xeb\x4c\x8a\x25\xc7\xce\xda\x8e\x58\x84\xf2\xdd\x77\x9c\xa4\x69\xc9\x9f\x36\xac\x38\x2c\x42\xd0\xda\xef\xcd\x3c\xbf\x19\x4f\xf2\x36\x22\xf8\x43\xc7\x3f\xe7\x0f\x90\xa4\x8a\x7b\xb8\x36\x36\xe1\xfe\x07\x58\x27\x8d\xa6\x8c\xd0\xf3\xd3\xb3\xd3\xa3\xd3\xaf\xf8\x4b\x0f\x4b\xf4\x04\x9c\xb0\x32\xf5\x15\xe0\x46\x4b\x2f\xb9\x22\x2b\x65\x96\xf8\x4f\x80\x90\x8a\x38\xf0\x59\x4a\xfe\xf3\x86\x44\x86\x18\x2d\xe0\xff\x35\x7b\xca\x2d\x4f\xc0\x63\x02\x24\x97\xf9\x8b\xf5\xcb\xc0\x43\x21\x37\x93\x77\xeb\x55\xc6\x98\x67\xca\x87\x6c\x6f\x6f\xc7\x1b\x64\x9e\x57\x51\x6b\xe4\xc3\x6b\x0a\x01\x76\x9f\x25\x4b\xb0\xcd\xdd\x86\xf2\xb1\x10\x26\xd3\x9e\xe8\x02\x4c\x4c\x4c\xfc\x33\x10\x8c\x4c\x78\xb5\x83\x4b\xc5\x79\x68\x1d\x27\xdf\x84\xa4\x37\xe3\xbb\x99\x51\x70\xf5\x1b\x4f\xa3\xb9\xda\xaf\xbc\x45\xe8\x3f\xc0\xdc\x5b\xa9\x57\x7b\x0e\x30\x07\x61\xc1\x13\xa8\xe2\x11\x19\x35\x09\x77\x52\xdf\x82\x5e\xf9\xe7\x00\xbf\x68\xee\x5e\x1a\xed\xbc\xe5\x52\xfb\x66\x4d\x9b\x42\x49\x92\x39\x4f\x96\x40\xb8\x27\x0a\x38\x7e\xbe\x20\xe2\x19\x4b\x29\x42\x25\x8f\xb7\xfc\x19\x6d\xb9\x44\x67\xe0\x4c\x66\x05\x34\x6a\x5d\x78\x6a\x31\x41\xdb\xb0\xf5\xf9\xb1\x0a\x8c\xa1\x0c\xc6\x82\x90\xa6\xf0\xa9\x35\x29\x58\x2f\x1b\x81\xeb\xfd\xb1\x73\x59\x02\x81\x39\x35\x4a\x8a\xd7\x89\x11\xf8\x5d\xfb\x4e\x74\xc1\x78\xdf\xf1\xe7\x47\xd8\xf4\x67\x5f\x1a\x69\x6b\xf0\xdc\xe3\x4d\xa9\xe2\x3d\x75\x07\x2c\x65\x88\xb5\xa1\xce\x3b\xb6\x11\xd5\x13\xb7\xe0\x5c\xc5\x31\x88\xa2\x61\xc6\x4a\x99\x97\x5d\x50\x2c\x5f\x24\xab\x0c\xfd\x2a\x2a\xc5\xa1\x9d\xae\x7e\x65\x5c\x75\x5b\xd6\x62\x04\xc5\x75\xfd\xa3\x41\x9c\x82\x37\x83\xb8\xb3\x83\xe8\x5e\x7a\xbe\x13\xd1\xbf\x9b\xef\xb0\x68\x8a\xc7\x16\x32\xe5\x6a\xbf\x45\xd8\x71\xc3\x9c\xb9\xd6\x8c\x7d\x37\x32\xb8\xfe\x44\xe9\x21\xfe\xe1\x56\x33\xfe\xe2\x98\xe4\x09\x63\xb8\xf2\x31\xab\xb6\x26\xdf\x7e\x8f\x0e\x09\x65\x99\x03\x7b\x52\xb0\x66\xc6\xf8\x47\xfc\x46\x17\x8b\xbf\x35\xaf\x73\x27\x6f\x87\xeb\x70\x19\x67\x79\x39\x58\x4e\x3a\xba\x94\x86\xf2\xdf\xe3\xa8\xaf\x8f\x58\x74\xfe\xa8\x3b\xf9\xf6\x58\xad\xa7\x43\x5a\xdc\xdd\x21\x33\xe2\x8e\x6b\xbe\x82\xa8\xbc\xec\x1f\x1d\x16\xff\xc6\x88\x78\xda\xdd\x9d\x3c\xf3\xc6\x09\xae\xf0\x16\xb3\x72\x58\x2f\xe1\x60\xc7\x70\x68\x91\x1e\xd3\x08\x15\x8d\x71\x65\x5e\xae\x7c\xb3\x26\x4b\x3f\x12\x61\x0e\xe1\x31\x21\x2d\x44\x97\x3c\xe5\x42\xfa\xa6\xd3\x2d\x36\x88\xf3\xe1\x62\x03\xf8\x01\x6c\x22\x35\xea\x1c\x84\x9e\x80\x82\x01\x50\xa1\x4c\x16\xc5\xc5\x7b\x0d\x5a\x3d\x5c\x50\x83\x77\x2b\x9d\x3f\xe8\xbf\xa1\x8b\xcf\x99\xe9\xeb\x27\x66\x00\xf7\x64\xfb\xac\xcb\xe9\xfa\x5b\x73\x3d\x9a\x36\x0f\xea\x76\xca\x45\xdf\x55\x2e\xdf\x00\x46\xf9\xe8\x4f\x00\x00\x00\xff\xff\xe4\xf8\x23\x4c\x5e\x0a\x00\x00")

func tenant_aws_initial_setup_template_bytes() ([]byte, error) {
	return bindata_read(
		_tenant_aws_initial_setup_template,
		"tenant-aws-initial-setup.template",
	)
}

func tenant_aws_initial_setup_template() (*asset, error) {
	bytes, err := tenant_aws_initial_setup_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tenant-aws-initial-setup.template", size: 2654, mode: os.FileMode(420), modTime: time.Unix(1493825610, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tenant_aws_region_setup_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5f\x4f\xe3\x46\x10\x7f\xe7\x53\xac\xfc\xd4\x56\x40\x21\x48\xb4\xf5\x5b\x0e\x72\x55\xaa\x53\x9a\x8b\x69\xef\xa1\x42\xd1\x66\x3d\x49\x56\xb5\x77\x7d\xde\x35\x28\x45\xfe\xee\x1d\x8f\x1d\x93\xd8\x5e\x63\x68\x4f\x77\x11\x8a\x88\xfd\x9b\x7f\x3b\xbf\x99\xd9\x79\x3a\x61\xf8\xf1\xc6\x9f\x82\x3b\x88\x93\x88\x5b\x78\xaf\xd3\x98\xdb\x3f\x21\x35\x52\x2b\xcf\x67\xde\xe8\xe2\xf2\xe2\xec\xe2\x17\xfc\xf3\x4e\x4b\xf4\x2d\x18\x91\xca\xc4\x56\x80\x00\x6c\x96\x30\x01\x42\x46\x4c\x2b\xb6\xd3\x59\xca\xf8\xa3\x61\x5c\x08\x9d\x29\xcb\xd6\x1a\x7f\xb3\x14\x36\x88\x67\xdf\x59\xcd\x42\x5d\xe0\x80\x8b\x6d\xf5\xf4\xfb\xbd\xe6\x39\x4f\x79\x0c\x16\x8d\xa3\xe2\xd2\x37\x7a\x7e\x53\x28\x47\x27\xa7\xb7\x47\xcf\xc9\x97\x35\xcf\x22\x5b\xf8\xf1\xf4\x74\xfe\x8c\xcb\xf3\x4a\x67\x8d\xbc\xdb\x25\x50\xc0\x66\x59\xbc\x82\xb4\xf9\xb6\x11\xd3\xb8\xf2\x5d\x11\x98\xe9\x35\xb3\x5b\x60\xa8\xb9\x8e\x0a\x1f\x51\xc8\x5e\xad\x27\xa7\xff\xf2\x2a\x94\x05\x18\x3c\x08\x01\x8d\x48\x48\xc6\xea\x44\x8a\x46\x24\x07\x1e\xa2\x19\xdf\x0f\x66\xf8\x75\x47\xc0\x86\xab\xf3\x54\x27\x90\x5a\xd9\x50\xfd\x1c\x8a\x34\x98\xc9\xdd\x0c\x4f\xb2\xd0\x36\xb9\x19\x31\x63\x31\xb3\x4c\x6c\xb9\xda\x00\x8b\xc1\x18\xbe\x41\xe9\xd3\xb6\x2c\x19\xdc\x4b\xe2\x81\xa2\x17\xf5\xa3\xd6\x91\x92\x44\x90\xad\x0e\x4f\xee\xaf\xb6\x43\x04\x9b\xa8\x30\xd1\x52\xd9\x4e\x97\x6b\xd4\x7b\xe5\xfb\xbf\x21\xac\x50\xe4\x79\xa7\xf8\xc5\x53\xe5\x23\x99\x7c\xf3\xd9\xf8\x07\x09\x5e\x10\x6f\xf2\xdc\x47\x90\x5b\x1f\xe9\x5c\xc0\xba\x08\xe6\x80\x42\x4e\x7c\x7e\xca\xbc\xc2\x4a\xf0\x31\xf8\x98\x41\x06\x55\xd4\xf7\xf7\x9d\x12\x79\xfb\x34\xc8\x20\xe6\xc7\x6a\xa1\xa3\xc2\x2a\xba\xdd\x36\x97\x1f\xeb\xcb\x4f\x3a\x34\x1e\x10\x25\xd1\x91\x14\xbb\xc1\x74\x99\x97\xf0\x57\x92\xa6\x94\xba\xd5\x22\x8b\xa1\x27\x4b\xde\x71\x63\x18\x9d\x61\x6f\xb8\xfc\xa9\x83\x17\x04\x0e\x0a\xda\x55\xfa\x1c\xc4\x28\x71\x32\x2c\x14\x2e\x97\x61\x59\xcd\x4b\xb3\x17\x5c\x62\xba\xba\x95\x93\xe0\x64\xbd\x06\x41\xc5\x3f\x8e\x22\xfd\xd8\x07\x9d\xa7\x52\x09\x99\xf0\xa8\x97\x81\x04\xc5\x03\x2d\x54\xfe\xd0\x47\x14\xb7\xa1\xb1\xd8\x97\x42\xbf\x15\xa3\x8c\x3f\xcf\x56\x91\x34\xdb\x1e\xbf\x6b\xe8\x02\x62\xfd\x00\x73\x48\x63\x69\x28\x03\x03\x64\xb0\x33\x13\x25\xc6\xd6\xa6\x72\x95\xd9\xce\x9a\x6f\x49\xdd\x42\x84\x2d\xb8\xab\xf5\x74\xc2\x3f\x48\x63\x0f\x9b\x80\x79\xb7\x1b\x2c\xfb\xeb\x9b\x1c\x5c\x80\x00\xf9\x00\x43\xa0\xe3\x30\x7c\xe5\x91\x95\x91\xac\xc0\x9d\xfc\xfb\x9e\xe4\xef\xbb\xfe\xcb\x24\xab\xda\xd2\xc1\x3c\x78\x13\xdb\x6e\xb4\x0a\x65\x45\xb8\x17\x2c\x06\x78\xc6\x6a\x33\xf9\x9c\xf1\xa8\xbb\x09\xb4\x24\x8a\xce\x12\x50\x3c\xbf\x3f\x2a\x9c\x99\x43\x84\x48\xb0\x0a\x8e\x3a\x53\x35\x4a\xa7\xa1\x3b\xc0\xfd\x27\xef\x45\xb8\xdf\x76\xbf\xc9\xfb\x46\xc3\x73\xcf\x11\x48\x59\x1d\xc1\xd2\x64\xab\xe5\xc5\xd7\x6a\x36\x03\x92\xe1\x9e\x8d\x92\xc7\xfe\xcb\x83\xb0\x56\xf4\x8a\x81\xb8\xff\xd0\x60\xcc\x0c\xa4\x3f\x92\xd4\x42\x6b\xfb\x07\xfe\x72\x4d\xc6\x5a\xec\x8b\x37\xd0\xe7\x72\xfd\x7f\xfb\x86\xb3\xa9\x7d\x43\x5d\xe1\xed\xa4\xc7\xac\x4f\x1e\x70\xba\x9a\x25\x19\x5a\x4e\xc3\xeb\xeb\xeb\xab\xeb\xcb\xab\xcb\x9f\xaf\x46\xae\x69\x4e\x0a\xbe\x4c\x0d\x04\x90\x3e\x48\x3a\x1e\x0f\xc8\xaf\x73\x1e\xf3\x7f\xb4\x42\x72\x9f\x0b\x1d\xff\xd7\x39\x7c\x34\x6a\xbf\x95\x3c\xb5\x2b\xa7\x23\x98\xf2\x3e\x6e\x7a\xee\xd5\x03\x1c\x19\x7e\xdd\x7c\xe4\x56\x6c\x3b\xfa\xfc\xf1\x55\xb3\xa4\x8e\xef\x2f\xb2\xa8\x59\x4b\x2f\x5e\x33\xf7\xab\x05\xb5\x91\x4f\x95\xb9\x8e\xb8\xc9\xc6\x9c\x5b\x5c\x05\xdd\x93\xcd\x0b\xc1\x72\x19\x9d\xd9\xd2\x3b\x77\xbb\xa0\x1d\x68\xaa\xf0\x56\xa9\x04\x30\xba\x95\x9e\x55\xcb\xd0\x4c\x5b\xb9\x96\x82\x13\x57\x3a\x15\x38\x08\xe3\xd5\x54\xe9\xb1\x5b\x10\x18\xc4\xc8\xa1\x78\x10\x03\x1a\x8b\xe9\xcd\x16\xc4\xdf\xb4\x52\xa3\xde\x6a\xaf\x2b\x6b\x86\x71\x15\xb2\x84\x1b\x53\xac\xaa\x31\xc3\x3d\xbb\x58\x59\xe9\xa0\x19\x6e\x07\xcc\x3a\x2e\x65\xe5\x2d\x9d\x36\xc5\xd9\xf8\xdd\x87\x49\xd7\x85\xdb\xbb\xe3\xe9\x06\x6c\x1f\x11\xa7\xd4\x59\x64\xa8\xd7\xae\x6d\x60\xdc\x93\x4a\x02\x0c\x2c\xaa\x76\x41\xb9\x19\x5e\xae\xe4\x27\xf9\xc9\xbf\x01\x00\x00\xff\xff\x34\x2b\xd2\x82\xe9\x10\x00\x00")

func tenant_aws_region_setup_template_bytes() ([]byte, error) {
	return bindata_read(
		_tenant_aws_region_setup_template,
		"tenant-aws-region-setup.template",
	)
}

func tenant_aws_region_setup_template() (*asset, error) {
	bytes, err := tenant_aws_region_setup_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tenant-aws-region-setup.template", size: 4329, mode: os.FileMode(420), modTime: time.Unix(1480872921, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tenant-aws-initial-setup.template": tenant_aws_initial_setup_template,
	"tenant-aws-region-setup.template": tenant_aws_region_setup_template,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tenant-aws-initial-setup.template": &_bintree_t{tenant_aws_initial_setup_template, map[string]*_bintree_t{
	}},
	"tenant-aws-region-setup.template": &_bintree_t{tenant_aws_region_setup_template, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

