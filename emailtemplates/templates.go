package emailtemplates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _account_verification_notification_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x51\x5f\x4b\xc3\x30\x10\x7f\xcf\xa7\x38\xf3\xb2\x17\x67\x5f\x65\xc4\x80\xcc\x81\x8a\xb8\xe1\x2a\x28\x08\xe3\xd6\xde\x6c\x34\x4b\x62\x7a\x53\xc7\xe8\x77\x37\x5d\xab\x20\x03\xc1\xbe\xfc\x8e\xde\xfd\xfe\xe4\x4e\x1d\x5d\x4c\xc7\xf9\xe3\x6c\x02\x15\xaf\xad\x16\xaa\x83\x84\x84\xa5\x16\x90\x3e\xb5\x26\x46\x28\x2a\x8c\x35\xf1\x99\xdc\xf0\x6a\x78\x2a\xfb\x16\x1b\xb6\xa4\x55\xd6\xa1\x50\x59\x47\x13\x6a\xe9\xcb\x6d\x3f\x13\x74\xee\xa1\x88\x84\x4c\x80\x0e\xce\x67\x57\xc0\xfe\x95\xdc\x31\xd4\xe4\x4a\x40\x98\x4d\xe7\x39\x44\x7a\xdb\x50\xcd\xa9\x05\x6a\xa9\x77\xbb\x93\x77\x8a\x66\x65\x0a\x64\xe3\xdd\x82\x31\x3e\x13\x2f\x36\xd1\x36\x8d\xca\x96\x1a\x3e\x0c\x57\xc0\x95\xa9\xe1\x7a\x3e\xbd\x85\x80\x5b\xeb\xb1\x1c\xa9\x2c\x24\xf7\xbd\x6d\xe1\x4b\xd2\x3b\xf9\x5b\xa6\xf5\x95\x23\x79\x20\xdf\xfe\x6f\x1a\x99\xb4\xf7\x34\xf1\x9d\x7c\x7c\x7f\x77\x03\x93\x4f\x5c\x07\x4b\x07\xe2\xa2\x48\x79\xe0\x49\x0c\x2f\x41\x8e\xbd\x63\x72\x3c\xcc\xb7\x81\x46\x80\x21\xd8\x5e\x3b\x7b\xa9\xbd\x93\xed\xd4\x43\xf7\xd0\x54\x95\x30\xf8\x6f\xb0\x41\xe2\xfd\xb5\x14\xf1\x93\x3c\x55\xdd\xf2\xdb\x6b\xec\x8f\xf9\x15\x00\x00\xff\xff\x0c\xa2\xe8\x0d\xe4\x01\x00\x00")

func account_verification_notification_html_bytes() ([]byte, error) {
	return bindata_read(
		_account_verification_notification_html,
		"account-verification-notification.html",
	)
}

func account_verification_notification_html() (*asset, error) {
	bytes, err := account_verification_notification_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "account-verification-notification.html", size: 484, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _lease_approved_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x51\x8b\xd4\x30\x10\x7e\xdf\x5f\x31\x1e\x07\xde\x81\x6e\x5f\x65\xc9\x15\xc4\x13\x39\x10\x14\x5d\x11\x9f\xca\x6c\x3a\xbb\x0d\xb6\x49\x48\x26\x77\x96\xd2\xff\x6e\x9a\xb4\x2b\x5b\x4f\xfb\x32\xc9\x97\x6f\xbe\xc9\x7c\x99\x8a\x17\xf7\x9f\xde\xed\x7f\x7c\x7e\x0f\x0d\x77\x6d\xb9\x11\x39\xc4\x48\x58\x97\x1b\x88\x9f\xe8\x88\x11\x64\x83\xce\x13\xdf\x5d\x05\x3e\xbe\x7e\x73\x35\x1f\xb1\xe2\x96\x4a\x51\xe4\xb8\x11\x45\x4e\xdb\x88\x83\xa9\xfb\x99\x63\xcb\x8f\x84\x9e\x00\xad\x75\xe6\x91\xea\x9d\x28\xec\x7c\x14\xda\xbc\x48\x9b\x56\xcd\xc4\x87\xfb\x1d\x88\x43\x39\x0c\xdb\x76\xda\x57\xaa\x1e\x47\x51\x1c\x62\x99\x48\xb9\xe0\x7f\x70\x26\x58\xd8\xf7\x96\x96\x8c\xd3\x84\x54\x1c\x91\xff\xe7\x7c\xfb\x53\x24\xa7\x84\xe7\xab\x0c\x83\x3a\xc2\x16\x9f\x7c\x25\x8d\x66\x54\x9a\x5c\xa5\xb1\x23\x18\xc7\x0b\xd5\xb7\xdf\xbf\xc2\x99\x01\x13\x63\x91\xff\x3b\xf7\xf9\x3a\xa4\xeb\x95\xe6\x17\x3a\x29\xa3\x17\x1d\x47\xde\x04\x27\xa9\x72\x09\x5e\x8b\x88\x62\x32\x73\x71\xfc\x41\x7b\x46\x2d\xc9\x03\x7a\x6f\xa4\x42\xa6\x1a\x9e\x14\x37\xc0\x0d\x41\xb2\x15\x6e\xd2\x52\x79\x86\x0e\x7b\x38\x10\x28\x2d\x4d\x67\x5b\x62\xba\xfd\xc7\x1b\x0d\x03\x38\xd4\x27\x82\xeb\x9f\xd4\xbf\x82\xeb\x47\x6c\x03\xc1\xee\x0e\xb6\xea\x5c\x70\xd5\x84\xf0\xec\x8c\x3e\xc5\x0e\x16\xfa\x74\xf3\x19\x5c\x7b\x00\xd1\x84\x45\xe0\xb2\xa1\x7d\xbc\xab\x0c\xce\x91\x66\xa0\x5f\x56\x39\xe4\x68\x02\x28\xbf\xd8\x93\x40\xf2\x15\x72\x76\x06\x6e\xce\xf3\x53\x87\xcc\x1e\x47\xc0\x23\xc7\xe7\x51\xfc\xd2\x83\x74\x94\xd0\xdb\xd4\x6a\x1c\xdd\x3c\xb2\xd3\x0c\xa7\x5f\xe0\x77\x00\x00\x00\xff\xff\xd5\x22\xaa\x97\x1a\x03\x00\x00")

func lease_approved_html_bytes() ([]byte, error) {
	return bindata_read(
		_lease_approved_html,
		"lease-approved.html",
	)
}

func lease_approved_html() (*asset, error) {
	bytes, err := lease_approved_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "lease-approved.html", size: 794, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _lease_expiring_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x4d\x6b\xdc\x40\x0c\xbd\xf7\x57\xa8\x26\xd0\x04\xd2\xf5\xb5\x2c\x5e\x43\x49\x42\x09\x14\x5a\xda\x2d\xa5\x27\x23\xdb\x5a\x7b\xd8\xf1\x8c\x99\x91\xbb\x31\xc6\xff\xbd\x33\xe3\x8f\x65\xb7\x69\x4f\xf3\xa1\xa7\x27\xe9\x49\x4a\xde\x3e\x7e\x79\xd8\xff\xfa\xfa\x04\x35\x37\x32\x7d\x93\x4c\x07\x40\x52\x13\x96\xfe\xe2\xae\x0d\x31\x42\x51\xa3\xb1\xc4\xbb\xa8\xe3\xc3\xfb\x0f\xd1\x6c\x62\xc1\x92\xd2\x24\x9e\x4e\xef\x17\x2f\x8e\x49\xae\xcb\x7e\x86\xb5\xe9\x67\x42\x4b\x40\x2f\xad\x30\x42\x55\xdb\x24\x6e\x67\x53\x27\xa7\x4b\x78\x48\x31\x03\x9f\x1f\xb7\x8e\x20\x1d\x86\x8d\xf4\xef\x4c\x94\xe3\x98\xc4\xb9\x8b\xe4\x20\x17\xf8\x4f\x46\x77\x2d\xec\xfb\x96\x16\x8f\xca\xff\x64\xec\x7e\xfe\xef\xf3\xe3\x1c\x64\x72\xe9\x5e\x8f\x32\x0c\xe2\x00\x1b\x3c\xd9\xac\xd0\x8a\x51\x28\x32\x99\xc2\x86\x60\x1c\x2f\x58\x3f\xfe\xfc\x0e\x2b\x02\x3c\x62\xa1\xff\xdb\xf7\xf5\x38\xa4\xca\x2b\xce\x6f\x54\x09\xad\x16\x1e\x43\x56\x77\xa6\xa0\xcc\x84\xef\x6b\x92\x24\xf6\x62\x2e\x8a\x3f\x2b\xcb\xa8\x0a\xb2\x80\xd6\xea\x42\x20\x53\x09\x27\xc1\x35\x70\x4d\x10\x64\x85\xdb\x70\x15\x96\xa1\xc1\x1e\x72\x02\xa1\x0a\xdd\xb4\x92\x98\xee\xfe\xd1\xa3\x61\x00\x83\xaa\x22\xb8\x39\x52\x7f\x0f\x37\xbf\x51\x76\x04\xdb\x1d\x6c\xc4\x1a\xf0\xaa\x88\xc4\xb2\xd1\xaa\x72\x15\x2c\x70\x9f\xf9\xfc\x79\xad\x01\x38\x11\x16\x82\xcb\x82\xf6\x6b\xda\x27\xb4\x50\x18\x0a\x15\xad\x23\x52\x76\x06\x39\xa8\x02\x58\x69\xb8\xd5\xca\xdb\x66\x58\x86\x3c\x8e\x77\xf7\x80\x8e\x5c\xd8\x75\x0e\xc1\x6a\xad\x36\xe7\x42\x2f\x82\x08\x29\xbd\x24\x4c\xa6\x11\x2a\xc4\x72\x94\x53\x23\x82\x3f\xd9\xc0\xea\x7b\x00\x6e\x42\x7a\xdd\x41\xa9\xd5\x3b\x06\x43\x8a\x4e\x20\x78\x22\x5e\x98\x9f\x5e\xd8\x97\x76\x16\x3f\xef\x57\x36\x6f\xc9\xf2\x7e\x22\x73\xdd\x46\xa8\x0d\x1d\x76\xd1\x5a\xdc\x0c\xe9\x8c\x1c\xc7\x08\x18\x4d\xe5\x57\x31\xcb\x25\xaa\x63\x94\x3e\x48\x51\x1c\xa1\x26\xe3\xb2\xd5\x9e\x74\x82\x4f\xd3\x81\xe9\x92\x86\x7b\x87\x95\x74\x3b\x1a\xb6\xfc\x4f\x00\x00\x00\xff\xff\x62\x08\xdb\x3a\xfd\x03\x00\x00")

func lease_expiring_html_bytes() ([]byte, error) {
	return bindata_read(
		_lease_expiring_html,
		"lease-expiring.html",
	)
}

func lease_expiring_html() (*asset, error) {
	bytes, err := lease_expiring_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "lease-expiring.html", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _lease_extended_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x51\x8b\xd4\x30\x10\x7e\xdf\x5f\x31\x1e\x07\xde\x81\x6e\x5f\x65\xc9\x15\xc4\x13\x39\x10\x14\x5d\x11\x9f\xca\x34\x9d\x6d\x83\x6d\x52\x92\x89\x67\x29\xfd\xef\xa6\x49\xbb\xb2\xf5\xbc\xbe\x4c\xf2\xe5\x9b\x6f\x32\x5f\xa6\xe2\xc5\xfd\xa7\x77\xc7\x1f\x9f\xdf\x43\xc3\x5d\x9b\xef\x44\x0a\x21\x12\x56\xf9\x0e\xc2\x27\x3a\x62\x04\xd9\xa0\x75\xc4\x77\x57\x9e\x4f\xaf\xdf\x5c\x2d\x47\xac\xb8\xa5\x5c\x64\x29\xee\x44\x96\xd2\x76\xa2\x34\xd5\xb0\x70\xfa\xfc\x23\xa1\x23\xa0\xdf\x4c\xba\xa2\xea\x20\xb2\x7e\x39\xf2\x6d\x5a\xc4\x4d\xab\x16\xe2\xc3\xfd\x01\x44\x99\x8f\xe3\xbe\x9d\xf7\x85\xaa\xa6\x49\x64\x65\x28\x13\x28\x17\xfc\x0f\xd6\xf8\x1e\x8e\x43\x4f\x6b\x46\x3d\x23\x05\x07\xe4\xf9\x9c\x6f\x7f\x8b\xa4\x14\xff\x74\x95\x71\x54\x27\xd8\xe3\xa3\x2b\xa4\xd1\x8c\x4a\x93\x2d\x34\x76\x04\xd3\x74\xa1\xfa\xf6\xfb\x57\x38\x33\x60\x66\xac\xf2\xff\xe6\x3e\x5d\x27\x78\xb3\xd1\xfc\x42\xb5\x32\x7a\xd5\xb1\xe4\x8c\xb7\x92\x0a\x1b\xe1\xad\x88\xc8\x66\x33\x57\xc7\x1f\xb4\x63\xd4\x92\x1c\xa0\x73\x46\x2a\x64\xaa\xe0\x51\x71\x03\xdc\x10\x44\x5b\xe1\x26\x2e\x95\x63\xe8\x70\x80\x92\x40\x69\x69\xba\xbe\x25\xa6\xdb\xff\xbc\xd1\x38\x82\x45\x5d\x13\x5c\xff\xa4\xe1\x15\x5c\xff\xc2\xd6\x13\x1c\xee\x60\xaf\xce\x05\x37\x4d\x08\xc7\xd6\xe8\x3a\x74\xb0\xd2\xe7\x9b\x2f\xe0\xd6\x03\x08\x26\xac\x02\x97\x0d\x1d\xc3\x5d\xa5\xb7\x96\x34\x87\x41\xea\x95\x45\x0e\x26\x80\x72\xab\x3d\x11\x24\x57\x20\x27\x67\xe0\xe6\x3c\x3f\x95\x4f\xec\x69\x02\x3c\x71\x78\x1e\xc5\x2f\x1d\x48\x4b\x11\xbd\x8d\xad\x86\xd1\x4d\x23\x3b\xcf\x70\xfc\x05\xfe\x04\x00\x00\xff\xff\xfa\xee\x98\xef\x1a\x03\x00\x00")

func lease_extended_html_bytes() ([]byte, error) {
	return bindata_read(
		_lease_extended_html,
		"lease-extended.html",
	)
}

func lease_extended_html() (*asset, error) {
	bytes, err := lease_extended_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "lease-extended.html", size: 794, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _lease_terminated_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x4c\x43\x0e\x09\xa4\xf6\xb5\x2c\x8a\xa1\x34\xa5\x04\x0a\x2d\xed\x96\xd2\x93\x19\xdb\x13\x5b\xd4\x96\x8c\x34\xee\x62\x8c\xff\x7b\x25\xf9\x63\x59\x77\x9b\xbd\x8c\x34\xf3\xde\x1b\xcd\xdb\xb1\x78\xf3\xf4\xe5\xc3\xf1\xd7\xd7\x8f\x50\x73\xdb\xa4\x91\x98\x83\x8b\x84\x65\x1a\x81\xfb\x89\x96\x18\xa1\xa8\xd1\x58\xe2\xc7\x9b\x9e\x5f\xde\xbe\xbb\x59\x4a\x2c\xb9\xa1\x54\x24\x73\x8c\x44\x32\xd3\x22\x91\xeb\x72\x58\x30\x5d\xfa\x99\xd0\x12\x30\x99\x56\x2a\x64\x2a\x0f\x22\xe9\x96\x62\xdf\xcc\x87\x70\x69\xe4\x02\x7d\x7e\x3a\x80\xc8\xd3\x71\x8c\x1b\x7f\xcf\x64\x39\x4d\x22\xc9\x5d\x23\x07\xb9\xc0\x7f\x32\xba\xef\xe0\x38\x74\xb4\x32\x2a\x9f\xc9\xd8\x65\x5e\xe7\xfc\x38\x37\x99\x29\xfd\xf5\x2e\xe3\x28\x5f\x20\xc6\x93\xcd\x0a\xad\x18\xa5\x22\x93\x29\x6c\x09\xa6\xe9\x42\xf5\xfd\xcf\xef\xb0\x21\xc0\x23\x56\xf9\x7f\xb9\xd7\xfb\x90\x2a\x77\x9a\xdf\xa8\x92\x5a\xad\x3a\x86\xac\xee\x4d\x41\x99\x09\xe9\xbd\x88\x48\xbc\x99\xab\xe7\xcf\xca\x32\xaa\x82\x2c\xa0\xb5\xba\x90\xde\x77\x38\x49\xae\x81\x6b\x82\x60\x2b\xdc\x85\xa3\xb4\x0c\x2d\x0e\x90\x13\x48\x55\xe8\xb6\x6b\x88\xe9\xfe\x3f\xff\xd1\x38\x82\x41\x55\x11\xdc\xfe\xa6\xe1\x01\x6e\xff\x60\xd3\x13\x1c\x1e\x21\x96\x5b\xc3\xdd\x10\xc2\xb2\xd1\xaa\x72\x13\xac\x70\xff\xf2\x25\xb9\xf7\x00\x9c\x09\xab\xc0\xe5\x40\xc7\xed\xd9\x27\xb4\x50\x18\x0a\x13\x6d\x2b\x52\xf6\x06\x39\xb8\x02\x58\x69\xb8\xd3\xca\xd7\x16\x58\x86\x3c\x4d\xf7\x0f\x80\x4e\xdc\xb3\xcf\xab\x08\x0e\x37\xbb\x7b\xce\x05\xb4\xf7\x36\x0e\x1e\xb8\xad\x9e\xb7\xd9\xaf\x77\xf8\x3a\xfe\x06\x00\x00\xff\xff\x65\xb5\x1d\xd3\x35\x03\x00\x00")

func lease_terminated_html_bytes() ([]byte, error) {
	return bindata_read(
		_lease_terminated_html,
		"lease-terminated.html",
	)
}

func lease_terminated_html() (*asset, error) {
	bytes, err := lease_terminated_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "lease-terminated.html", size: 821, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _misconfiguration_notice_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\xb1\xce\x83\x30\x0c\x84\xf7\x3c\x85\x7f\xf6\x9f\xac\x55\xe5\x66\x69\x19\x3a\xb5\x43\x97\x8e\xa1\x98\x26\x12\x90\xc8\x98\xa1\x42\xbc\x7b\x03\x41\xcd\x90\x93\xfc\xf9\xee\x8c\x7f\x97\xdb\xf9\xf1\xbc\x57\xe0\xa4\xef\x8c\xc2\x2c\x49\xc9\x36\x46\x41\x7a\xd8\x93\x58\x78\x39\xcb\x23\xc9\xa9\x98\xa4\xfd\x3f\x14\x3b\x12\x2f\x1d\x19\xd4\x59\x15\xea\x6c\x53\x58\x87\xe6\xb3\xef\x44\x73\x15\xb0\x31\x52\x0a\x00\x71\x56\xd2\x47\x4c\xe0\x47\x48\xb1\x61\x68\xfd\x7b\x62\x2b\x3e\x0c\x40\xcc\x81\x4b\xd4\xf1\x67\xad\xd6\xc9\x11\xb0\x66\x33\xcf\x65\xe2\xcb\xb2\x61\xd4\xb9\x61\xad\xdc\x2e\xfe\x06\x00\x00\xff\xff\x3f\xd0\x14\xee\xc9\x00\x00\x00")

func misconfiguration_notice_html_bytes() ([]byte, error) {
	return bindata_read(
		_misconfiguration_notice_html,
		"misconfiguration-notice.html",
	)
}

func misconfiguration_notice_html() (*asset, error) {
	bytes, err := misconfiguration_notice_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "misconfiguration-notice.html", size: 201, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _new_lease_no_owner_tag_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x5f\x6b\xdb\x30\x10\x7f\xcf\xa7\xb8\xe5\x65\x29\x74\xf1\xeb\x28\xaa\xa1\xb4\x63\x14\x06\x1d\x5b\xc7\xd8\x93\x39\x5b\x67\x5b\x54\xb1\x8c\x7c\x4a\x16\x82\xbf\xfb\x4e\x96\xe3\xd1\xac\x2c\x2f\x8a\xcf\xbf\x7f\x77\x3a\xab\x77\x0f\x4f\xf7\xcf\xbf\xbe\x7e\x82\x96\x77\x36\x5f\xa9\x74\xc8\x49\xa8\xf3\x15\xc8\x4f\xed\x88\x11\xaa\x16\xfd\x40\x7c\xbb\x0e\x5c\x7f\xf8\xb8\x9e\x5f\xb1\x61\x4b\xb9\xca\xd2\xb9\x52\x59\xa2\xad\x54\xe9\xf4\x71\xc6\xf4\xf9\x17\xc2\x81\xa0\xf2\x84\x4c\xfa\x46\x65\xfd\xfc\x26\xd8\xf4\x67\x7a\xb0\x66\xc6\x3d\x3e\xdc\x80\x2a\xf3\xd3\x69\x6b\xe3\x73\x61\xf4\x38\xaa\xac\x14\x17\x81\xbc\xc2\x7f\xf6\x2e\xf4\xf0\x7c\xec\xe9\xcc\x68\x62\xa5\x60\xa9\xfc\x9f\xf3\xe3\xaf\x49\xa2\x84\xb7\x5d\x4e\x27\x53\xc3\x16\x0f\x43\x51\xb9\x8e\xd1\x74\xe4\x8b\x0e\x77\x04\xe3\xf8\x4a\xf5\xee\xe7\x77\x58\x10\x10\x11\x67\xf9\x7f\xb9\x6f\xfb\x50\xa7\x2f\x34\xbf\x51\x63\x5c\x77\xd6\xf1\x34\xb8\xe0\x2b\x2a\xfc\x54\xbe\x14\x51\x59\x1c\xe6\x79\xe0\x8f\x0c\xda\xd1\x00\x9d\x63\x68\x71\x4f\x80\xb0\x47\x6b\xb4\xf8\x6c\x7b\xef\x74\xa8\x78\x8e\xf2\x74\x88\x81\x19\x9b\x6b\x18\x1c\x1c\x04\x39\x0c\xa6\xe9\x48\x83\x61\x60\x07\x47\x17\x60\xc3\xad\xd4\xf5\xce\x74\x57\xdb\xe9\xf2\x16\x9b\x7a\x72\xc0\x5e\x34\xf7\xa4\xaf\x23\xe7\x60\xac\x85\x92\x80\xc9\x0b\x21\x5e\x38\x20\xcf\x3d\xd0\xef\xde\x48\x1f\x05\x72\x8a\x0f\x9b\xe5\x92\x75\xf0\xc8\x53\x5f\x80\xb5\x70\x45\xea\xfd\x90\x56\x46\xaa\x17\xbe\x77\xc9\x10\x36\x31\xdd\x62\x28\x21\x5d\xec\xe6\x4a\x46\x86\xd0\x7a\xaa\x6f\xd7\x8b\xfe\x9c\xb1\x08\xde\x8e\xe3\x5a\x1a\xf6\x4d\x5c\xe6\xa2\xb4\xd8\xbd\xac\xf3\x7b\x6b\xaa\x17\x68\xc9\x53\x6c\x5a\xd2\xce\xf8\x34\x64\xcc\x93\xbd\xec\x77\xda\xeb\xb8\xe8\xd3\x77\xf2\x27\x00\x00\xff\xff\x22\x58\x7a\xbf\x3f\x03\x00\x00")

func new_lease_no_owner_tag_html_bytes() ([]byte, error) {
	return bindata_read(
		_new_lease_no_owner_tag_html,
		"new-lease-no-owner-tag.html",
	)
}

func new_lease_no_owner_tag_html() (*asset, error) {
	bytes, err := new_lease_no_owner_tag_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "new-lease-no-owner-tag.html", size: 831, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _new_lease_owner_tag_not_whitelisted_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x5f\x6b\xdb\x30\x10\x7f\xcf\xa7\xb8\xe5\x65\x29\x74\xc9\xeb\x28\xaa\xa1\xb4\x63\x14\x06\x1d\x5b\xc6\xd8\x93\xb9\x58\x17\x5b\x54\x91\x8c\x74\x9e\x17\x82\xbf\xfb\x4e\x96\x9d\xd1\xac\xd4\x2f\x92\x4e\xbf\x3f\x77\xa7\xb3\x7a\xf7\xf0\x74\xbf\xfd\xf5\xf5\x13\x34\x7c\xb0\xc5\x42\xe5\x45\x56\x42\x5d\x2c\x40\x3e\x75\x20\x46\xa8\x1a\x0c\x91\xf8\x76\xd9\xf1\xfe\xc3\xc7\xe5\x74\xc5\x86\x2d\x15\x6a\x93\xd7\x85\xda\x64\xda\x42\xed\xbc\x3e\x4e\x98\xb6\xf8\x42\x18\x09\xaa\x40\xc8\xa4\x6f\xd4\xa6\x9d\x6e\x3a\x9b\x37\xe3\xc1\x9a\x09\xf7\xf8\x70\x03\x6a\x57\x9c\x4e\x6b\x9b\xce\xa5\xd1\xc3\xa0\x36\x3b\x71\x11\xc8\x0b\xfc\xe7\xe0\xbb\x16\xb6\xc7\x96\x66\x46\x9d\x22\x25\x4b\xe4\x6d\xce\x8f\x7f\x26\x99\xd2\xbd\xee\x72\x3a\x99\x3d\xac\xb1\x8f\x65\xe5\x1d\xa3\x71\x14\x4a\x87\x07\x82\x61\x78\xa1\x7a\xf7\xf3\x3b\x9c\x11\x90\x10\xb3\xfc\xff\xdc\xd7\x7d\xc8\xe9\x0b\xcd\x6f\x54\x1b\xef\x66\x9d\x40\xd1\x77\xa1\xa2\x32\x8c\xe1\x4b\x11\xb5\x49\xcd\x9c\x1b\xbe\x6d\x48\x24\xd7\x6d\xf0\xba\xab\x78\x72\x7d\xea\x53\x6e\x8c\x35\x78\x07\xdc\x98\x08\xc6\x45\x46\x57\x11\xc8\xde\x79\x96\xb3\xc4\x09\xfa\xc6\x30\x59\x13\xf9\x1a\xa2\x87\x9e\x00\x63\x34\xb5\x23\x0d\x86\x81\x3d\x1c\x7d\x07\xab\x04\x44\x7d\x30\xee\x6a\x3d\x3e\xe8\x6c\xfd\xb8\x1f\xa5\xb0\x15\xf3\xdf\xa4\xaf\x13\xa7\x37\xd6\xc2\x8e\x80\x29\x08\x21\x0d\x01\x20\x4f\x75\xd1\x9f\xd6\x48\x6d\x25\x72\x2e\x09\x56\xe7\x87\xd7\x5d\x40\x1e\x6b\x05\xdc\x0b\x57\xa4\xde\xc7\x3c\x46\x12\xbd\xf0\xbd\xcb\x86\xb0\x4a\xd9\x9d\x0d\x25\x49\x9f\xca\xbe\x92\x36\x22\x34\x81\xf6\xb7\xcb\xb3\xfe\x94\x63\xd9\x05\x3b\x0c\x4b\xe9\x4c\xa8\xd3\x80\x97\x3b\x8b\xee\x79\x59\xdc\x5b\x53\x3d\x43\x43\x81\x52\xd1\x92\xed\x84\xcf\x8d\xc7\x22\xdb\xcb\xcc\xe7\x59\x4f\xc3\x3f\xfe\x3b\x7f\x03\x00\x00\xff\xff\x4d\x04\xb3\xda\x53\x03\x00\x00")

func new_lease_owner_tag_not_whitelisted_html_bytes() ([]byte, error) {
	return bindata_read(
		_new_lease_owner_tag_not_whitelisted_html,
		"new-lease-owner-tag-not-whitelisted.html",
	)
}

func new_lease_owner_tag_not_whitelisted_html() (*asset, error) {
	bytes, err := new_lease_owner_tag_not_whitelisted_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "new-lease-owner-tag-not-whitelisted.html", size: 851, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _new_lease_valid_owner_tag_needs_approval_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xc1\x6a\xdc\x30\x10\xbd\xef\x57\x4c\x7d\x69\x0b\xe9\xfa\x5a\x82\x62\x58\x92\x52\x0a\x85\x86\x36\xa5\xf4\x24\xc6\xf6\x78\x2d\x22\x4b\x46\x1e\xaf\xbb\x2c\xfe\xf7\x8e\x2c\xef\x86\xa4\xa1\x7b\xd1\x6a\xf4\xde\x9b\xe7\x27\x8d\x7a\x73\xf7\xed\xf6\xe1\xf7\xfd\x27\x68\xb9\xb3\xc5\x46\xa5\x45\x56\xc2\xba\xd8\x80\xfc\x54\x47\x8c\x50\xb5\x18\x06\xe2\x9b\x6c\xe4\xe6\xc3\xc7\x6c\x3d\x62\xc3\x96\x0a\x95\xa7\x75\xa3\xf2\x44\xdb\xa8\xd2\xd7\xc7\x15\xd3\x17\x5f\x09\x07\x82\x2a\x10\x32\xd5\xd7\x2a\xef\xd7\x93\xd1\xa6\x3f\xcb\xc6\x9a\x15\xf7\xe5\xee\x1a\x54\x59\x9c\x4e\x5b\x1b\xf7\xda\xd4\xf3\xac\xf2\x52\xba\x08\xe4\x19\xfe\x73\xf0\x63\x0f\x0f\xc7\x9e\xce\x8c\x7d\xac\x68\x96\xca\xff\x39\x3f\x9f\x9a\x24\xca\xf8\x7a\x97\xd3\xc9\x34\xb0\xc5\x69\xd0\x95\x77\x8c\xc6\x51\xd0\x0e\x3b\x82\x79\x7e\xa6\xba\xfb\xf5\x03\x2e\x08\x88\x88\xb3\xfc\xbf\xdc\xd7\xfb\x90\xab\x5f\x68\x7e\xa7\xbd\xf1\xee\xac\x13\x68\xf0\x63\xa8\x48\x87\xa5\xfc\x52\x44\xe5\x31\xcc\x73\xe0\x3b\x06\x6e\x09\xd8\x88\x53\xdf\xc0\x14\x0c\x1b\xb7\x97\x9a\x19\x80\x3a\x34\xf6\x0a\x8e\x7e\x84\x16\x0f\x24\xad\xb7\x4e\xfb\x46\x63\xc5\xe6\x40\x7a\xc9\x7c\x98\x67\x48\x7b\x48\xfb\x2b\x18\x3c\x4c\x04\x8e\xa8\x8e\xd4\x00\xd8\xf7\xc1\x1f\xd0\x42\xe3\x43\x12\xf6\x8e\xb6\x4f\x77\xdb\x17\xf7\x36\x5d\xbb\x35\xd5\xa3\x1c\x42\xb6\x5b\x28\x94\x01\xfb\x95\x4e\x89\xb9\x00\xaf\xc0\x8b\xe7\x30\x19\xe1\x18\x86\xc9\x58\x0b\xa5\x00\x28\x74\xc6\xc5\x87\x03\xc8\x6b\x16\xf4\xa7\x37\x92\x87\x46\x4e\x31\xc0\xbb\xcb\x63\xa9\xc7\x80\xbc\xe4\x03\xd8\x08\x57\xa4\xde\x0e\xe9\xe9\x49\xf5\x7d\x32\x78\x89\x29\x99\x90\x88\x11\xda\x40\xcd\x4d\x76\xd1\x59\xfd\xe9\x31\xd8\x79\x16\xc7\x18\xf6\xf1\xf1\xeb\xd2\xa2\x7b\xcc\x8a\xdb\xe5\xa3\xc4\x2e\xc5\x8f\x11\x57\x2b\x3e\x5d\x0a\x16\xa9\x8d\xcc\x43\x9a\x83\x38\x18\xcb\x5c\xfd\x0d\x00\x00\xff\xff\x14\x65\xb3\xfd\x6f\x03\x00\x00")

func new_lease_valid_owner_tag_needs_approval_html_bytes() ([]byte, error) {
	return bindata_read(
		_new_lease_valid_owner_tag_needs_approval_html,
		"new-lease-valid-owner-tag-needs-approval.html",
	)
}

func new_lease_valid_owner_tag_needs_approval_html() (*asset, error) {
	bytes, err := new_lease_valid_owner_tag_needs_approval_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "new-lease-valid-owner-tag-needs-approval.html", size: 879, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _new_lease_valid_owner_tag_no_approval_needed_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xcf\x4b\xc3\x30\x14\xbe\xf7\xaf\x78\xee\xa2\x1e\x5c\xaf\x32\x62\x41\x9c\x88\x20\x28\x3a\x91\x9d\xca\x6b\xfb\xba\x05\xd2\xb4\xa4\x2f\xcc\x51\xfa\xbf\x9b\x34\xed\x64\x73\xd8\xcb\x6b\xbe\x7c\x3f\xe0\x7d\x11\x17\xcb\xd7\x87\xd5\xfa\xed\x11\xb6\x5c\xa9\x24\x12\x61\xb8\x49\x58\x24\x11\xb8\x4f\x54\xc4\x08\xf9\x16\x4d\x4b\x7c\x37\xb3\x5c\xde\xdc\xce\xc6\x2b\x96\xac\x28\x11\x71\x98\x91\x88\x83\x2c\x12\x59\x5d\xec\x47\x4e\x93\xbc\x10\xb6\x04\xb9\x21\x64\x2a\x16\x22\x6e\xc6\x1b\xab\xc2\xcf\x70\x50\x72\xe4\x3d\x2f\x17\x20\xb2\xa4\xeb\xe6\xca\x9f\x53\x59\xf4\xbd\x88\x33\x97\xe2\x28\x47\xfc\x27\x53\xdb\x06\x56\xfb\x86\x26\xc5\xc6\x23\x29\x3b\xe4\x7f\xcd\xe7\x6f\x48\x90\xd8\xf3\x29\x5d\x27\x4b\x98\xe3\xae\x4d\xf3\x5a\x33\x4a\x4d\x26\xd5\x58\x11\xf4\xfd\x91\xeb\xfd\xd7\x07\x1c\x18\xe0\x19\x93\xfd\x5f\xed\xf9\x1c\xd2\xc5\x89\xe7\x3b\x6d\x64\xad\x27\x1f\x43\x6d\x6d\x4d\x4e\xa9\x19\xe0\x53\x13\x11\xfb\x65\x4e\x0b\x5f\x3b\x2a\x48\xdd\x32\xea\x9c\x60\x27\x95\x82\x8c\x80\xc9\x54\x52\xfb\x0e\x00\x79\xb4\xa5\xef\x46\x3a\xeb\x14\x39\x38\xc2\xd5\x61\xef\x85\x35\xc8\x43\x14\x60\xe9\xb4\x20\xf9\xb2\x0d\x2d\x3a\xf4\x7a\x3e\xf4\xe8\x2a\x0f\x55\xfb\xee\x87\xa7\xf3\x13\x00\x00\xff\xff\x05\x8e\xd8\x3d\x52\x02\x00\x00")

func new_lease_valid_owner_tag_no_approval_needed_html_bytes() ([]byte, error) {
	return bindata_read(
		_new_lease_valid_owner_tag_no_approval_needed_html,
		"new-lease-valid-owner-tag-no-approval-needed.html",
	)
}

func new_lease_valid_owner_tag_no_approval_needed_html() (*asset, error) {
	bytes, err := new_lease_valid_owner_tag_no_approval_needed_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "new-lease-valid-owner-tag-no-approval-needed.html", size: 594, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _region_successfully_setup_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x8a\xd7\xce\xd0\x48\x4c\x0c\xc6\x4b\x29\x12\x13\x0c\x5d\x98\xd0\x39\xb9\xd6\x96\x9c\x73\x94\x73\x14\x55\x55\xff\x3b\xa6\x4e\xbd\x3c\x59\xfe\xfc\xde\xbb\x33\x9b\xf7\xaf\xfd\xf1\xe7\xfb\x00\x9f\x87\x68\x1b\x53\xa5\x28\x53\x6f\x1b\x94\x63\x06\xce\x84\xce\xd3\xa4\x9c\xdf\xb6\x73\x3e\x3d\xbf\x6e\xd7\xa7\x1c\x72\x64\x6b\xda\xaa\x8d\x69\xeb\xb7\xc6\xb8\xd4\x5f\x56\x66\xb4\x47\xcf\x98\xf8\x1c\x92\xc0\x38\x7b\xbd\xee\xea\xe5\x57\x68\xe0\xdb\xcd\xb4\xce\xc2\x93\xc2\x31\x0b\x74\xee\x3a\x56\x3d\xcd\x31\x5e\x50\x02\xe7\x71\x63\xda\xb1\x58\xae\x5e\x1f\x53\x1a\x20\x69\x41\x92\x27\x50\x8c\x10\x5e\x0a\xd9\x4d\x4c\x99\x7b\x1c\xf6\x2f\xf8\x14\xcd\x24\xc5\x05\x41\x90\x7d\xd0\x47\xf8\x12\x0a\xef\x18\xa4\x1a\xce\x52\xe8\xc8\xa4\xac\xbb\x1a\x50\x7a\xdc\x4b\xff\x4f\x71\x5f\xc2\x5f\x00\x00\x00\xff\xff\x1a\xd9\x12\x83\x1c\x01\x00\x00")

func region_successfully_setup_html_bytes() ([]byte, error) {
	return bindata_read(
		_region_successfully_setup_html,
		"region-successfully-setup.html",
	)
}

func region_successfully_setup_html() (*asset, error) {
	bytes, err := region_successfully_setup_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "region-successfully-setup.html", size: 284, mode: os.FileMode(420), modTime: time.Unix(1498270218, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _report_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\x41\x8b\xdb\x3c\x10\xbd\xe7\x57\xcc\xb7\xdf\x16\x5a\x88\x93\xed\x6d\x71\xbd\x86\xd2\x16\x7a\x6b\xa1\x85\xd2\x53\x98\x58\xe3\x58\x54\x91\x8c\x34\xbb\x49\x08\xfe\xef\x1d\x49\x76\x36\x69\x7a\x2b\xa5\x81\x20\x65\xf2\x66\xde\xd3\x7b\xb2\xab\xff\xde\x7f\x7a\xf7\xf5\xfb\xe7\x0f\xd0\xf1\xd6\xd4\xb3\x2a\x2f\xb2\x12\xaa\x7a\x06\x50\x6d\x89\x11\x9a\x0e\x7d\x20\x7e\xb8\x79\xe4\xb6\xb8\xbf\x49\x7f\xb0\x66\x43\x75\xb5\xcc\x6b\xac\x04\x3e\xe4\x1d\x00\xe3\xda\x10\x1c\xd3\x1e\xa0\x75\x96\x8b\x16\xb7\xda\x1c\x4a\x40\xaf\xd1\xcc\x21\xa0\x0d\x45\x20\xaf\xdb\x37\x23\x6a\xed\xbc\x22\x5f\x34\xce\x18\xec\x03\x95\x30\xed\x26\xc0\x4e\x2b\xee\x4a\x78\x7d\x77\xf7\x22\x97\x86\x59\x26\x53\xf3\xbc\x76\x27\xc6\x3c\x4b\xb0\xfd\x1e\x82\x33\x5a\xc1\xff\x2a\x7d\xa6\x59\x4c\x7b\x2e\xd0\xe8\x8d\x2d\xc1\x50\xcb\x53\xbd\x47\xa5\xb4\xdd\x94\x70\xdf\xef\x2f\x49\x7c\x69\xb9\x2b\x9a\x4e\x1b\xf5\x92\x9e\xc8\xbe\x7a\x26\xc3\xe6\xc7\xc6\xbb\x47\xab\xa2\x78\x27\xb4\x17\x64\x43\xf4\x66\x39\x9a\x53\x2d\xb3\xb3\xb3\x6a\xed\xd4\x21\xd9\xd6\xd7\x1f\xc9\x18\x07\xc7\xe3\xc2\x53\xa3\x7b\x4d\x96\x57\xb4\x45\x6d\x86\x61\x0e\x1d\x79\x02\x1d\xe4\x70\x04\x9e\x7a\xe7\x59\xec\xf4\xf0\xf6\xdb\x17\xc0\xa6\x11\x52\x86\x6a\x5d\x4b\x2f\xee\xc2\x6a\xac\xac\xb4\x1a\x86\x6a\xb9\xae\x41\xdb\x5f\x50\x8d\x30\x98\x2b\xdc\xa2\x5a\xf6\xf5\x2c\xa5\x1a\x83\xcb\x19\x56\xec\xeb\xf1\x84\xc7\xa3\x47\xbb\x21\xb8\xd5\x56\xd1\x7e\x0e\xb7\x72\x4e\x28\x1f\x60\x11\x0f\x43\x7e\xc5\x5e\x2c\x20\x19\x36\xe2\x63\x73\x27\x74\x11\x17\x19\xe4\xc7\x69\x12\xd9\x09\x27\xf5\x91\xe1\x6a\xbe\x58\xe0\x0f\x89\x21\xee\x34\x85\x2b\x8a\x33\x75\xbf\xe9\x6f\x35\x19\x15\xfb\xf3\xa4\x33\x61\xb1\x53\x45\x69\x09\x92\xc4\xa9\xf3\x41\xcf\xf2\x2e\x05\x4e\x75\xa9\x65\x8b\xa6\xe8\x24\x1e\x94\x6f\xcc\x47\x2c\xcd\x2a\xc5\xf7\xc0\x68\x1b\x8a\xb9\x21\x83\x72\x60\x1d\x43\x87\x4f\x24\xb7\x0d\x83\xd4\x31\x04\xd7\x68\x64\x01\xef\xb4\xdc\x5c\xe9\xdf\x96\x7f\x18\xc3\x89\xff\x6f\x06\x71\x4d\xf2\xef\xa3\x90\x3b\x9c\x9e\xa6\xf8\x78\xa5\x17\xd8\xcf\x00\x00\x00\xff\xff\x78\xac\x2a\xff\xd8\x04\x00\x00")

func report_html_bytes() ([]byte, error) {
	return bindata_read(
		_report_html,
		"report.html",
	)
}

func report_html() (*asset, error) {
	bytes, err := report_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "report.html", size: 1240, mode: os.FileMode(420), modTime: time.Unix(1493825610, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"account-verification-notification.html": account_verification_notification_html,
	"lease-approved.html": lease_approved_html,
	"lease-expiring.html": lease_expiring_html,
	"lease-extended.html": lease_extended_html,
	"lease-terminated.html": lease_terminated_html,
	"misconfiguration-notice.html": misconfiguration_notice_html,
	"new-lease-no-owner-tag.html": new_lease_no_owner_tag_html,
	"new-lease-owner-tag-not-whitelisted.html": new_lease_owner_tag_not_whitelisted_html,
	"new-lease-valid-owner-tag-needs-approval.html": new_lease_valid_owner_tag_needs_approval_html,
	"new-lease-valid-owner-tag-no-approval-needed.html": new_lease_valid_owner_tag_no_approval_needed_html,
	"region-successfully-setup.html": region_successfully_setup_html,
	"report.html": report_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"account-verification-notification.html": &_bintree_t{account_verification_notification_html, map[string]*_bintree_t{
	}},
	"lease-approved.html": &_bintree_t{lease_approved_html, map[string]*_bintree_t{
	}},
	"lease-expiring.html": &_bintree_t{lease_expiring_html, map[string]*_bintree_t{
	}},
	"lease-extended.html": &_bintree_t{lease_extended_html, map[string]*_bintree_t{
	}},
	"lease-terminated.html": &_bintree_t{lease_terminated_html, map[string]*_bintree_t{
	}},
	"misconfiguration-notice.html": &_bintree_t{misconfiguration_notice_html, map[string]*_bintree_t{
	}},
	"new-lease-no-owner-tag.html": &_bintree_t{new_lease_no_owner_tag_html, map[string]*_bintree_t{
	}},
	"new-lease-owner-tag-not-whitelisted.html": &_bintree_t{new_lease_owner_tag_not_whitelisted_html, map[string]*_bintree_t{
	}},
	"new-lease-valid-owner-tag-needs-approval.html": &_bintree_t{new_lease_valid_owner_tag_needs_approval_html, map[string]*_bintree_t{
	}},
	"new-lease-valid-owner-tag-no-approval-needed.html": &_bintree_t{new_lease_valid_owner_tag_no_approval_needed_html, map[string]*_bintree_t{
	}},
	"region-successfully-setup.html": &_bintree_t{region_successfully_setup_html, map[string]*_bintree_t{
	}},
	"report.html": &_bintree_t{report_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

