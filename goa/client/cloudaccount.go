// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tleyden/cecil/design
// --out=$(GOPATH)/src/github.com/tleyden/cecil/goa
// --version=v1.0.0
//
// API "Cecil": cloudaccount Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddCloudaccountPayload is the cloudaccount add action payload.
type AddCloudaccountPayload struct {
	AwsID                string  `form:"aws_id" json:"aws_id" xml:"aws_id"`
	DefaultLeaseDuration *string `form:"default_lease_duration,omitempty" json:"default_lease_duration,omitempty" xml:"default_lease_duration,omitempty"`
}

// AddCloudaccountPath computes a request path to the add action of cloudaccount.
func AddCloudaccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts", param0)
}

// Add new cloudaccount
func (c *Client) AddCloudaccount(ctx context.Context, path string, payload *AddCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewAddCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddCloudaccountRequest create the request corresponding to the add action endpoint of the cloudaccount resource.
func (c *Client) NewAddCloudaccountRequest(ctx context.Context, path string, payload *AddCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// AddWhitelistedOwnerCloudaccountPayload is the cloudaccount addWhitelistedOwner action payload.
type AddWhitelistedOwnerCloudaccountPayload struct {
	Email   string  `form:"email" json:"email" xml:"email"`
	KeyName *string `form:"key_name,omitempty" json:"key_name,omitempty" xml:"key_name,omitempty"`
}

// AddWhitelistedOwnerCloudaccountPath computes a request path to the addWhitelistedOwner action of cloudaccount.
func AddWhitelistedOwnerCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/owners", param0, param1)
}

// Add new email (plus optional KeyName) to owner tag whitelist
func (c *Client) AddWhitelistedOwnerCloudaccount(ctx context.Context, path string, payload *AddWhitelistedOwnerCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewAddWhitelistedOwnerCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddWhitelistedOwnerCloudaccountRequest create the request corresponding to the addWhitelistedOwner action endpoint of the cloudaccount resource.
func (c *Client) NewAddWhitelistedOwnerCloudaccountRequest(ctx context.Context, path string, payload *AddWhitelistedOwnerCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteWhitelistedOwnerCloudaccountPayload is the cloudaccount deleteWhitelistedOwner action payload.
type DeleteWhitelistedOwnerCloudaccountPayload struct {
	Email   string  `form:"email" json:"email" xml:"email"`
	KeyName *string `form:"key_name,omitempty" json:"key_name,omitempty" xml:"key_name,omitempty"`
}

// DeleteWhitelistedOwnerCloudaccountPath computes a request path to the deleteWhitelistedOwner action of cloudaccount.
func DeleteWhitelistedOwnerCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/owners", param0, param1)
}

// Delete a whitelisted owner
func (c *Client) DeleteWhitelistedOwnerCloudaccount(ctx context.Context, path string, payload *DeleteWhitelistedOwnerCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewDeleteWhitelistedOwnerCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteWhitelistedOwnerCloudaccountRequest create the request corresponding to the deleteWhitelistedOwner action endpoint of the cloudaccount resource.
func (c *Client) NewDeleteWhitelistedOwnerCloudaccountRequest(ctx context.Context, path string, payload *DeleteWhitelistedOwnerCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DownloadInitialSetupTemplateCloudaccountPath computes a request path to the downloadInitialSetupTemplate action of cloudaccount.
func DownloadInitialSetupTemplateCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/tenant-aws-initial-setup.template", param0, param1)
}

// Download AWS initial setup cloudformation template
func (c *Client) DownloadInitialSetupTemplateCloudaccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDownloadInitialSetupTemplateCloudaccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDownloadInitialSetupTemplateCloudaccountRequest create the request corresponding to the downloadInitialSetupTemplate action endpoint of the cloudaccount resource.
func (c *Client) NewDownloadInitialSetupTemplateCloudaccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DownloadRegionSetupTemplateCloudaccountPath computes a request path to the downloadRegionSetupTemplate action of cloudaccount.
func DownloadRegionSetupTemplateCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/tenant-aws-region-setup.template", param0, param1)
}

// Download AWS region setup cloudformation template
func (c *Client) DownloadRegionSetupTemplateCloudaccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDownloadRegionSetupTemplateCloudaccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDownloadRegionSetupTemplateCloudaccountRequest create the request corresponding to the downloadRegionSetupTemplate action endpoint of the cloudaccount resource.
func (c *Client) NewDownloadRegionSetupTemplateCloudaccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListRegionsCloudaccountPath computes a request path to the listRegions action of cloudaccount.
func ListRegionsCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/regions", param0, param1)
}

// List all regions and their status
func (c *Client) ListRegionsCloudaccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListRegionsCloudaccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListRegionsCloudaccountRequest create the request corresponding to the listRegions action endpoint of the cloudaccount resource.
func (c *Client) NewListRegionsCloudaccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListWhitelistedOwnersCloudaccountPath computes a request path to the listWhitelistedOwners action of cloudaccount.
func ListWhitelistedOwnersCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/owners", param0, param1)
}

// List whitelisted owners
func (c *Client) ListWhitelistedOwnersCloudaccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListWhitelistedOwnersCloudaccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListWhitelistedOwnersCloudaccountRequest create the request corresponding to the listWhitelistedOwners action endpoint of the cloudaccount resource.
func (c *Client) NewListWhitelistedOwnersCloudaccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowCloudaccountPath computes a request path to the show action of cloudaccount.
func ShowCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s", param0, param1)
}

// Show cloudaccount
func (c *Client) ShowCloudaccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCloudaccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCloudaccountRequest create the request corresponding to the show action endpoint of the cloudaccount resource.
func (c *Client) NewShowCloudaccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SubscribeSNSToSQSCloudaccountPayload is the cloudaccount subscribeSNSToSQS action payload.
type SubscribeSNSToSQSCloudaccountPayload struct {
	Regions []string `form:"regions" json:"regions" xml:"regions"`
}

// SubscribeSNSToSQSCloudaccountPath computes a request path to the subscribeSNSToSQS action of cloudaccount.
func SubscribeSNSToSQSCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/subscribe-sns-to-sqs", param0, param1)
}

// Subscribe SNS to SQS
func (c *Client) SubscribeSNSToSQSCloudaccount(ctx context.Context, path string, payload *SubscribeSNSToSQSCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewSubscribeSNSToSQSCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSubscribeSNSToSQSCloudaccountRequest create the request corresponding to the subscribeSNSToSQS action endpoint of the cloudaccount resource.
func (c *Client) NewSubscribeSNSToSQSCloudaccountRequest(ctx context.Context, path string, payload *SubscribeSNSToSQSCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateCloudaccountPayload is the cloudaccount update action payload.
type UpdateCloudaccountPayload struct {
	AwsID                *string `form:"aws_id,omitempty" json:"aws_id,omitempty" xml:"aws_id,omitempty"`
	DefaultLeaseDuration string  `form:"default_lease_duration" json:"default_lease_duration" xml:"default_lease_duration"`
}

// UpdateCloudaccountPath computes a request path to the update action of cloudaccount.
func UpdateCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s", param0, param1)
}

// Update a cloudaccount
func (c *Client) UpdateCloudaccount(ctx context.Context, path string, payload *UpdateCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewUpdateCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCloudaccountRequest create the request corresponding to the update action endpoint of the cloudaccount resource.
func (c *Client) NewUpdateCloudaccountRequest(ctx context.Context, path string, payload *UpdateCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateWhitelistedOwnerCloudaccountPayload is the cloudaccount updateWhitelistedOwner action payload.
type UpdateWhitelistedOwnerCloudaccountPayload struct {
	Email   string  `form:"email" json:"email" xml:"email"`
	KeyName *string `form:"key_name,omitempty" json:"key_name,omitempty" xml:"key_name,omitempty"`
}

// UpdateWhitelistedOwnerCloudaccountPath computes a request path to the updateWhitelistedOwner action of cloudaccount.
func UpdateWhitelistedOwnerCloudaccountPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/owners", param0, param1)
}

// Modify a whitelisted owner
func (c *Client) UpdateWhitelistedOwnerCloudaccount(ctx context.Context, path string, payload *UpdateWhitelistedOwnerCloudaccountPayload) (*http.Response, error) {
	req, err := c.NewUpdateWhitelistedOwnerCloudaccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWhitelistedOwnerCloudaccountRequest create the request corresponding to the updateWhitelistedOwner action endpoint of the cloudaccount resource.
func (c *Client) NewUpdateWhitelistedOwnerCloudaccountRequest(ctx context.Context, path string, payload *UpdateWhitelistedOwnerCloudaccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
