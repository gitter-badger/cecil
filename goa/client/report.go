// Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
// and to You under the Apache License, Version 2.0.  See LICENSE in project root for full license + copyright.

// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "Cecil": report Resource Client
//
// Command:
// $ goagen
// --design=github.com/tleyden/cecil/design
// --out=$(GOPATH)/src/github.com/tleyden/cecil/goa
// --version=v1.0.0

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"strconv"
)

// OrderInstancesReportReportPayload is the report orderInstancesReport action payload.
type OrderInstancesReportReportPayload struct {
	MinimumLeaseAge string   `form:"minimum_lease_age" json:"minimum_lease_age" xml:"minimum_lease_age"`
	Recipients      []string `form:"recipients,omitempty" json:"recipients,omitempty" xml:"recipients,omitempty"`
}

// OrderInstancesReportReportPath computes a request path to the orderInstancesReport action of report.
func OrderInstancesReportReportPath(accountID int, cloudaccountID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/reports/instances", param0, param1)
}

// Order the creation of a report about instances
func (c *Client) OrderInstancesReportReport(ctx context.Context, path string, payload *OrderInstancesReportReportPayload) (*http.Response, error) {
	req, err := c.NewOrderInstancesReportReportRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewOrderInstancesReportReportRequest create the request corresponding to the orderInstancesReport action endpoint of the report resource.
func (c *Client) NewOrderInstancesReportReportRequest(ctx context.Context, path string, payload *OrderInstancesReportReportPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowReportReportPath computes a request path to the showReport action of report.
func ShowReportReportPath(accountID int, cloudaccountID int, reportUUID uuid.UUID) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(cloudaccountID)
	param2 := reportUUID.String()

	return fmt.Sprintf("/accounts/%s/cloudaccounts/%s/reports/generated/%s", param0, param1, param2)
}

// Show a single report
func (c *Client) ShowReportReport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowReportReportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowReportReportRequest create the request corresponding to the showReport action endpoint of the report resource.
func (c *Client) NewShowReportReportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
