// Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
// and to You under the Apache License, Version 2.0.  See LICENSE in project root for full license + copyright.

// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "Cecil": Application Resource Href Factories
//
// Command:
// $ goagen
// --design=github.com/tleyden/cecil/design
// --out=$(GOPATH)/src/github.com/tleyden/cecil/goa
// --version=v1.0.0

package app

import (
	"fmt"
	"strings"
)

// AccountHref returns the resource href.
func AccountHref(accountID interface{}) string {
	paramaccountID := strings.TrimLeftFunc(fmt.Sprintf("%v", accountID), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/accounts/%v", paramaccountID)
}

// CloudaccountHref returns the resource href.
func CloudaccountHref(accountID, cloudaccountID interface{}) string {
	paramaccountID := strings.TrimLeftFunc(fmt.Sprintf("%v", accountID), func(r rune) bool { return r == '/' })
	paramcloudaccountID := strings.TrimLeftFunc(fmt.Sprintf("%v", cloudaccountID), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/accounts/%v/cloudaccounts/%v", paramaccountID, paramcloudaccountID)
}

// LeasesHref returns the resource href.
func LeasesHref(accountID, cloudaccountID, leaseID interface{}) string {
	paramaccountID := strings.TrimLeftFunc(fmt.Sprintf("%v", accountID), func(r rune) bool { return r == '/' })
	paramcloudaccountID := strings.TrimLeftFunc(fmt.Sprintf("%v", cloudaccountID), func(r rune) bool { return r == '/' })
	paramleaseID := strings.TrimLeftFunc(fmt.Sprintf("%v", leaseID), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/accounts/%v/cloudaccounts/%v/leases/%v", paramaccountID, paramcloudaccountID, paramleaseID)
}

// RootHref returns the resource href.
func RootHref() string {
	return "/"
}
